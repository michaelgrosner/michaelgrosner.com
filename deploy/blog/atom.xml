<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>
        BASIC blog full text feed    </title>
        <link href="blog/atom.xml" rel="self" />
    
        <link href="http://www.michaelgrosner.com/"/>
    
        
    <updated>2012-01-24T23:41:14Z</updated>

    <id>http://www.michaelgrosner.com/blog/atom.xml/</id>

            <entry>
            <title type="html">Introducing CoffeeMol</title>
            <author><name>Michael Grosner</name></author>
            <link href="http://www.michaelgrosner.com/blog/2012/1/24-coffeemol.html"/>
            <updated>2012-01-24T23:00:00Z</updated>
            <published>2012-01-24T23:00:00Z</published>
            <id>{ content_url(res.url) }}</id>
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="CoffeeMol"
                        label="Coffeemol" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="CoffeeScript"
                        label="Coffeescript" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="jQuery"
                        label="Jquery" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="HTML5"
                        label="Html5" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="JavaScript"
                        label="Javascript" />
            
            <content type="html">
                &lt;p&gt;&lt;article&gt; &lt;br /&gt;
    I present &lt;a href=&#34;http://www.michaelgrosner.com/coffeemol&#34;&gt;CoffeeMol&lt;/a&gt; (check out the &lt;a href=&#34;https://github.com/michaelgrosner/CoffeeMol&#34;&gt;Source&lt;/a&gt;), an embeddable JavaScript Molecular Visualizer for &lt;span class=&#34;caps&#34;&gt;HTML5&lt;/span&gt; Browsers written in CoffeeScript and jQuery. CoffeeMol offers the ability to view and manipulate molecular structures in any modern, standards compliant browser &amp;#8212; including many mobile devices (multi-touch support in&amp;nbsp;development). &lt;/p&gt;
&lt;p&gt;It was written out of frustration stemming from having to load &lt;span class=&#34;caps&#34;&gt;PDB&lt;/span&gt; files into PyMol, orient to a view, save the &lt;span class=&#34;caps&#34;&gt;PNG&lt;/span&gt; file, load it onto the webserver, and remember the &lt;span class=&#34;caps&#34;&gt;URL&lt;/span&gt;, all while only getting a few views of the molecule. Instead, with only a few lines of JavaScript can load an viewer capable of displaying complex molecules. In addition, it doesn&amp;#8217;t require antiquated browser&amp;nbsp;applets.&lt;/p&gt;
&lt;h3&gt;To embed into an existing&amp;nbsp;webpage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compile &amp;#8212; You&amp;#8217;ll need to install &lt;a href=&#34;http://coffeescript.org/#installation&#34;&gt;CoffeeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;coffee -cj CoffeeMol.coffee CanvasContext.coffee Element.coffee Structure.coffee &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;br /&gt;        Chain.coffee Residue.coffee Atom.coffee main.coffee Viewer.coffee&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element with id &lt;code&gt;coffeemolCanvas&lt;/code&gt;, include at least jQuery version 1.7.1, and the compiled &lt;code&gt;CoffeeMol.js&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;width=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;coffeemolCanvas&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;Canvas Load Failed&lt;span class=&#34;nt&#34;&gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;&lt;br /&gt;...&lt;br /&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;jquery-1.7.1.min.js&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;CoffeeMol.js&amp;quot;&lt;/span&gt;  &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;&lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Include the following&amp;nbsp;JavaScript:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// Change this dictionary to suit your &lt;span class=&#34;caps&#34;&gt;PDB&lt;/span&gt; needs&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nx&#34;&gt;structures&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;quot;http://www.rcsb.org/pdb/files/&lt;span class=&#34;caps&#34;&gt;1MBO&lt;/span&gt;.pdb&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// &lt;span class=&#34;caps&#34;&gt;URL&lt;/span&gt; to a well-behaved &lt;span class=&#34;caps&#34;&gt;PDB&lt;/span&gt; file&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;nx&#34;&gt;drawMethod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;both&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                      &lt;span class=&#34;c1&#34;&gt;// Use &amp;#39;lines&amp;#39;, &amp;#39;points&amp;#39;, or &amp;#39;both&amp;#39;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;nx&#34;&gt;drawColor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;// &lt;span class=&#34;caps&#34;&gt;RGB&lt;/span&gt; color (optional)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;quot;/static/pdbs/&lt;span class=&#34;caps&#34;&gt;1KX5&lt;/span&gt;.pdb&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;// Can mix structures and properties&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;nx&#34;&gt;drawMethod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;points&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;nx&#34;&gt;borderColor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;c1&#34;&gt;// CoffeeMol only exposes the CanvasContext object to `window` and a loader function&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;loadFromDict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;structures&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;c1&#34;&gt;// Once everything is loaded, run it&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;JavaScript&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;&lt;canvas height=&#34;400&#34; width=&#34;800&#34; id=&#34;coffeemolCanvas&#34; style=&#34;border: 1px solid #ddd; box-shadow: 0px 0px 20px #ddd;&#34;&gt;Canvas Load Failed&lt;/canvas&gt;&lt;/p&gt;
&lt;script src=&#34;https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&#34; type=&#34;text/javascript&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/CoffeeMol.js&#34; type=&#34;text/javascript&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
structures = {
    &#34;http://www.rcsb.org/pdb/files/1MBO.pdb&#34;: {
        drawMethod: &#39;both&#39;,
    }
};

ctx = window.ctx;
window.loadFromDict(structures);
ctx.init();
&lt;/script&gt;

&lt;p&gt;And enjoy! (And send bug reports/feature requests via&amp;nbsp;Github!)&lt;/p&gt;
&lt;/article&gt;            </content>
        </entry>
            <entry>
            <title type="html">Open-Source Fellowship Applications</title>
            <author><name>Michael Grosner</name></author>
            <link href="http://www.michaelgrosner.com/blog/2011/10/24-fellowship-applications.html"/>
            <updated>2011-10-07T22:09:00Z</updated>
            <published>2011-10-07T22:09:00Z</published>
            <id>{ content_url(res.url) }}</id>
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="SQL"
                        label="Sql" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Updates"
                        label="Updates" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Batch Update"
                        label="Batch Update" />
            
            <content type="html">
                &lt;p&gt;&lt;article&gt; &lt;br /&gt;&amp;nbsp;Anything?&lt;/p&gt;
&lt;/article&gt;            </content>
        </entry>
            <entry>
            <title type="html">Batch Updates in MySQL</title>
            <author><name>Michael Grosner</name></author>
            <link href="http://www.michaelgrosner.com/blog/2011/10/7-batch-updates-in-sql.html"/>
            <updated>2011-10-07T22:09:00Z</updated>
            <published>2011-10-07T22:09:00Z</published>
            <id>{ content_url(res.url) }}</id>
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="SQL"
                        label="Sql" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Updates"
                        label="Updates" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Batch Update"
                        label="Batch Update" />
            
            <content type="html">
                &lt;p&gt;&lt;article&gt; &lt;br /&gt;
    Did you know you can &lt;span class=&#34;caps&#34;&gt;JOIN&lt;/span&gt; in an &lt;span class=&#34;caps&#34;&gt;UPDATE&lt;/span&gt; in MySQL to update entire columns? It&amp;#8217;s not in the MySQL documentation and since I&amp;#8217;m still learning &lt;span class=&#34;caps&#34;&gt;SQL&lt;/span&gt;, I&amp;#8217;d like to share my&amp;nbsp;discovery.&lt;/p&gt;
&lt;h3&gt;Setting the&amp;nbsp;Stage&lt;/h3&gt;
&lt;p&gt;I have a table of proteins bound to my &lt;span class=&#34;caps&#34;&gt;DNA&lt;/span&gt; loops called &lt;code&gt;boundprotein&lt;/code&gt; with foreign keys to the table &lt;code&gt;loop&lt;/code&gt;. Side note: Since I run this code on the cluster, it helps to not have integer foreign keys to the table &lt;code&gt;loop&lt;/code&gt;, so instead I use a &lt;span class=&#34;caps&#34;&gt;CHAR&lt;/span&gt; string close to a&amp;nbsp;hash. &lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s my scheme, vastly&amp;nbsp;simplified:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loop&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boundprotein&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loop_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ideal_id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;d like to count the amount of each type of bound protein to each loop and put that count into a new column. I&amp;#8217;m only considering the counts of Fis, a protein found in E. coli, so the column name will be &lt;code&gt;n_fis&lt;/code&gt;. Why would I do this? I now have 100 million loops and 180 million bound proteins in the database and the analysis is taking much too long to keep on joining, even with&amp;nbsp;indices.&lt;/p&gt;
&lt;p&gt;I have all the information in the database, how can I quickly update this with one&amp;nbsp;query?&lt;/p&gt;
&lt;h3&gt;The Wrong and Right&amp;nbsp;Ways&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s how &lt;em&gt;not&lt;/em&gt; to do it:
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;UPDATE&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lacdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;br /&gt;    &lt;span class=&#34;kt&#34;&gt;&lt;span class=&#34;caps&#34;&gt;SET&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n_fis&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;SELECT&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;br /&gt;                   &lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;FROM&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lacdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boundprotein&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt; &lt;br /&gt;                   &lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;WHERE&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ideal_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Fis&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;AND&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loop_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;MySQL&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;As you may be able to tell, MySQL will run a select across &lt;code&gt;boundprotein&lt;/code&gt; for every &lt;code&gt;loop&lt;/code&gt;. Horribly&amp;nbsp;inefficent.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the &lt;em&gt;correct&lt;/em&gt; way:
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;UPDATE&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lacdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;LEFT&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;JOIN&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lacdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boundprotein&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;ON&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loop_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;WHERE&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ideal_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Fis&amp;#39;&lt;/span&gt; &lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;GROUP&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&lt;span class=&#34;caps&#34;&gt;BY&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;br /&gt;    &lt;span class=&#34;kt&#34;&gt;&lt;span class=&#34;caps&#34;&gt;SET&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n_fis&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loop_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;MySQL&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;One &lt;span class=&#34;caps&#34;&gt;JOIN&lt;/span&gt;, much&amp;nbsp;quicker.&lt;/p&gt;
&lt;/article&gt;            </content>
        </entry>
            <entry>
            <title type="html">Using Python for Cluster Computing with Parallel Python</title>
            <author><name>Michael Grosner</name></author>
            <link href="http://www.michaelgrosner.com/blog/2011/9/4-pbs-and-parallel-python.html"/>
            <updated>2011-09-04T11:26:00Z</updated>
            <published>2011-09-04T11:26:00Z</published>
            <id>{ content_url(res.url) }}</id>
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Python"
                        label="Python" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="PBS"
                        label="Pbs" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Parallel Python"
                        label="Parallel Python" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="PBS"
                        label="Pbs" />
            
            <content type="html">
                &lt;p&gt;&lt;article&gt; &lt;br /&gt;
    Here&amp;#8217;s a hypothetical scenario: I have an embarassingly parallel problem or my parameter space is flexible enough to allow compuation on multiple, distributed nodes in a cluster. My code works as advertised in single processor, standard Python (or can be called from a Python script) and I&amp;#8217;m ready to scale up to a cluster to begin collecting data for analysis. Also, my cluster uses &lt;a href=&#34;https://biomaps.rutgers.edu/wiki/PBS_on_Gyges&#34;&gt;&lt;span class=&#34;caps&#34;&gt;PBS&lt;/span&gt; (Portable Batch System)&lt;/a&gt; via &lt;code&gt;qsub&lt;/code&gt; to submit and manage&amp;nbsp;jobs.&lt;/p&gt;
&lt;p&gt;I have a few&amp;nbsp;options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learn &lt;span class=&#34;caps&#34;&gt;MPI&lt;/span&gt; and use a Python wrapper - Probably the best option, but I&amp;#8217;m trying to get this simulation running&amp;nbsp;quickly&lt;/li&gt;
&lt;li&gt;Submit a qsub script for every parameter configuration - Or even better, make a script which makes and submit job&amp;nbsp;scripts&lt;/li&gt;
&lt;li&gt;Use a simple package like &lt;a href=&#34;http://www.parallelpython.com/&#34;&gt;Parallel Python&lt;/a&gt; to handle the multithreading and communication between&amp;nbsp;nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I found myself in this predicament, and since there was little documentation on how to use Parallel Python to set up my specific simlations, I decided to share my&amp;nbsp;solution.&lt;/p&gt;
&lt;h3&gt;The Python&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.parallelpython.com/content/view/15/30/#ADVANCEDCLUSTERS&#34;&gt;Parallel Python Documentation&lt;/a&gt; gives an-almost complete description of how to set up your Python code for &lt;code&gt;pp&lt;/code&gt;. A slightly more in-depth (and relevant) example than given in the documentation is provided&amp;nbsp;below&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pp&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_one&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;An example of a depfunc. The job server needs to be aware of &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;sd&#34;&gt;    the function&amp;#39;s existence&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;parallel_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot; This is the function to be parallelized. It takes (as far &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;sd&#34;&gt;    as I can tell, only non-keyworded args. Of note is if you&amp;#39;re &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;sd&#34;&gt;    using Python to call C/C++ code which makes output to stdout, &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;sd&#34;&gt;    it interferes with the `pp` communication. On the other hand,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;sd&#34;&gt;    using Python stdout, like printing os.getcwd() works fine. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_one&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getcwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parameter&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# Results will hold all returned values from the parallelized function&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# To get a list of `ppservers`, skip down to the next section on &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# writing the qsub script&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;n&#34;&gt;job_server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ppservers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ppservers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;job_server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parallel_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,),&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;n&#34;&gt;depfuncs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_one&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,),&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;n&#34;&gt;modules&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;os&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;n&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;n&#34;&gt;job_server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Python&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3&gt;The &lt;code&gt;qsub&lt;/code&gt; Script&lt;/h3&gt;
&lt;p&gt;When using &lt;span class=&#34;caps&#34;&gt;PBS&lt;/span&gt;, a script runs on some master node for the job and it&amp;#8217;s up to the coder to make sure all nodes are listening for work. Running something&amp;nbsp;like&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/sh&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;#&lt;span class=&#34;caps&#34;&gt;PBS&lt;/span&gt; -l nodes=4&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;python parallel_code.py&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Will only run &lt;code&gt;parallel_code.py&lt;/code&gt; on the master node while the other 3 nodes sit idle, wasting your allotted compute time. Even&amp;nbsp;doing&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/sh&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;#&lt;span class=&#34;caps&#34;&gt;PBS&lt;/span&gt; -l nodes=4&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;for &lt;/span&gt;i in &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;1..4&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;    &lt;/span&gt;python parallel_code.py &amp;amp;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Will not make &lt;span class=&#34;caps&#34;&gt;PBS&lt;/span&gt; send each ampersanded task to a different node. The solution is to &lt;code&gt;ssh&lt;/code&gt; into all the other nodes and start some process which will accept and compute tasks. Something&amp;nbsp;like,&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/sh&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;#&lt;span class=&#34;caps&#34;&gt;PBS&lt;/span&gt; -l nodes=4&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PBS_O_WORKDIR&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# Grab the list of unique nodes (each processor on a node shows up as &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# its own listing if using -l select=X), this is assuming only &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# -l nodes=Y is used.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nv&#34;&gt;&lt;span class=&#34;caps&#34;&gt;NODES&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;cat &lt;span class=&#34;nv&#34;&gt;$PBS_NODEFILE&lt;/span&gt; | uniq&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# Make a file in so the Python script can read it to make the &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# `ppservers` argument to pp.Server and so I can see which &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# nodes are running later on.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$&lt;span class=&#34;caps&#34;&gt;NODES&lt;/span&gt;&lt;/span&gt; &amp;gt; nodefile.txt&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# Declare a port for parallel python traffic&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nv&#34;&gt;&lt;span class=&#34;caps&#34;&gt;PORT&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;23335&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# Each &lt;span class=&#34;caps&#34;&gt;PBS&lt;/span&gt; job&amp;#39;s master node is given some environmental &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# variables (see http://doesciencegrid.org/public/pbs/qsub.html), &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# one of which is &lt;span class=&#34;caps&#34;&gt;TMPDIR&lt;/span&gt; which creates a temporary folder on &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# the node for I/O... but it&amp;#39;s not given to each child. Export &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# it to each node, in your Python code, use os.environ[&amp;#39;&lt;span class=&#34;caps&#34;&gt;TMPDIR&lt;/span&gt;&amp;#39;] &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# to use that location.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;for &lt;/span&gt;n in &lt;span class=&#34;nv&#34;&gt;$&lt;span class=&#34;caps&#34;&gt;NODES&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;    &lt;/span&gt;ssh -f grosner@&lt;span class=&#34;nv&#34;&gt;$n&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;cd $PBS_O_WORKDIR; mkdir -p $&lt;span class=&#34;caps&#34;&gt;TMPDIR&lt;/span&gt;; export &lt;span class=&#34;caps&#34;&gt;TMPDIR&lt;/span&gt;=$&lt;span class=&#34;caps&#34;&gt;TMPDIR&lt;/span&gt;; ppserver.py -p $&lt;span class=&#34;caps&#34;&gt;PORT&lt;/span&gt; &amp;amp;&amp;quot;&lt;/span&gt; &amp;amp;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# Run the simulations&lt;/span&gt;&lt;br /&gt;python run_closure.py &lt;span class=&#34;nv&#34;&gt;$&lt;span class=&#34;caps&#34;&gt;PORT&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;code&gt;ppserver.py&lt;/code&gt; should be running on every node &lt;span class=&#34;caps&#34;&gt;PBS&lt;/span&gt; assigns to you. There is also a &lt;code&gt;-t&lt;/code&gt; flag to specify the timeout before &lt;code&gt;ppserver.py&lt;/code&gt; terminates itself. I don&amp;#8217;t use it since I&amp;#8217;ve been having issues with&amp;nbsp;it.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Now that everything should be working, your code should be parallelized to as many nodes as you can get your hands on. There are some issues with error reporting in Parallel Python, especially since it looks like &lt;code&gt;ppserver.py&lt;/code&gt; only gets a string of the code and calls &lt;code&gt;exec&lt;/code&gt; or &lt;code&gt;eval&lt;/code&gt; on it, so errors may be unhelpful. Therefore, test your code in both single threaded and possilbly single node mode using the standard &lt;code&gt;multiprocessing&lt;/code&gt; module.&lt;/p&gt;
&lt;/article&gt;            </content>
        </entry>
            <entry>
            <title type="html">Django and Numpy</title>
            <author><name>Michael Grosner</name></author>
            <link href="http://www.michaelgrosner.com/blog/2011/8/9-django-and-numpy.html"/>
            <updated>2011-08-09T12:58:12Z</updated>
            <published>2011-08-09T12:58:12Z</published>
            <id>{ content_url(res.url) }}</id>
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Django"
                        label="Django" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Numpy"
                        label="Numpy" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="SQL"
                        label="Sql" />
            
            <content type="html">
                &lt;p&gt;&lt;article&gt; &lt;br /&gt;
    I recently had to parse a series of 4x4 matrices comprising of a position vector and a translation matrix, save it to a database, and compute some statistics. There will be thousands of these matricies, plus millions of the constituent atoms making up the &lt;span class=&#34;caps&#34;&gt;DNA&lt;/span&gt; base pairs. Plus, my advisor wanted a database for future reference and a possible web&amp;nbsp;interface.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m good at Python, used Django and its &lt;span class=&#34;caps&#34;&gt;ORM&lt;/span&gt; in the past, and I love Numpy. So why not try to combine&amp;nbsp;them?&lt;/p&gt;
&lt;p&gt;My super hack-ish way originated from &lt;a href=&#34;http://stackoverflow.com/questions/6485790/numpy-array-to-base64-and-back-to-numpy-array-python&#34;&gt;this stackoverflow post&lt;/a&gt;. I expanded on the method with a few refinements of my own, which I&amp;#8217;ll outline&amp;nbsp;below.&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt;   &lt;span class=&#34;nn&#34;&gt;django.db&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt;   &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt;     &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;base64&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;x_dim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IntegerField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;y_dim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IntegerField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blank&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;astype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;c&#34;&gt;# Vector case&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ndim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_dim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ndim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_dim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_dim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Only 1 or 2D Arrays are supported&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b64encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decodestring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frombuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_dim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_dim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_dim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Python&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3&gt;Issues with this&amp;nbsp;method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Since &lt;span class=&#34;caps&#34;&gt;SQL&lt;/span&gt; doesn&amp;#8217;t support an array class, there would be no way to make a QuerySet looking for &lt;code&gt;array[2,3]&lt;/code&gt;, for instance. You would have to load the every, entire array then make some&amp;nbsp;calculations.&lt;/li&gt;
&lt;li&gt;Arbitrary dimensional arrays won&amp;#8217;t&amp;nbsp;work.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_or_create&lt;/code&gt; won&amp;#8217;t work since the logical value of an array in numpy can be evaulated using &lt;code&gt;any()&lt;/code&gt; or &lt;code&gt;all()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s ugly&amp;#8230; but it&amp;#8217;s&amp;nbsp;working.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Future&amp;nbsp;work?&lt;/h3&gt;
&lt;p&gt;As I was typing up this post, I was imagining sparse array model based on this sort of&amp;nbsp;psuedocode&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ForeignKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;SparseArray&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FloatField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;x_ind&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IntegerField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;y_ind&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IntegerField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SparseArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;c&#34;&gt;# Fields for x_dim, y_dim, etc. along &lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;c&#34;&gt;# with a method to access elements&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Python&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;This would be valuable if I desperately needed to access individual variables, but the extra cost of inserting all the extra Elements into the database would probably be too high. I&amp;#8217;m fairly confident that in my case, using dense arrays, the database hit of accessing every Element would greatly exceed evaluating the entire&amp;nbsp;Array. &lt;/p&gt;
&lt;/article&gt;            </content>
        </entry>
            <entry>
            <title type="html">Setting up a static site using Hyde</title>
            <author><name>Michael Grosner</name></author>
            <link href="http://www.michaelgrosner.com/blog/2011/8/5-installing-hyde.html"/>
            <updated>2011-08-05T14:13:00Z</updated>
            <published>2011-08-05T14:13:00Z</published>
            <id>{ content_url(res.url) }}</id>
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Python"
                        label="Python" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Hyde"
                        label="Hyde" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Jinja2"
                        label="Jinja2" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Static Web Design"
                        label="Static Web Design" />
            
            <content type="html">
                &lt;p&gt;&lt;article&gt; &lt;br /&gt;
    This blog was written in Hyde, and I thought I&amp;#8217;d provide a tutorial for those about to take it&amp;nbsp;on.&lt;/p&gt;
&lt;h3&gt;Installing&amp;nbsp;packages&lt;/h3&gt;
&lt;p&gt;I set up a virtualenv with pip then downloaded Hyde using &lt;code&gt;pip install hyde&lt;/code&gt;. In addition, I set up fabric as Steve Losh documented in his post &lt;a href=&#34;http://stevelosh.com/blog/2010/01/moving-from-django-to-hyde/&#34;&gt;Moving from Django to Hyde&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;First&amp;nbsp;steps&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/lakshmivyas/hyde/&#34;&gt;github&lt;/a&gt; documentation on Hyde is so broken, even the steps to initialize a project and generate content are out dated. Assuming you&amp;#8217;re in your virtualenv or hyde is on your &lt;code&gt;$PATH&lt;/code&gt;, running &lt;code&gt;hyde create&lt;/code&gt; will create the static application, which includes folders &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;layout&lt;/code&gt;, and the file &lt;code&gt;site.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A better idea would be to follow Steve Losh&amp;#8217;s fabfile in the section above. As with the github documentation, his fabfile&amp;#8217;s command-line arguments are outdated. Use the updated commands&amp;nbsp;below:&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;hyde create  &lt;span class=&#34;c&#34;&gt;# Create a project in the current directory&lt;/span&gt;&lt;br /&gt;hyde gen     &lt;span class=&#34;c&#34;&gt;# Generate content and layouts for the current project&lt;/span&gt;&lt;br /&gt;hyde serve   &lt;span class=&#34;c&#34;&gt;# Serve the generated content&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3&gt;An overview of the static&amp;nbsp;site&lt;/h3&gt;
&lt;p&gt;At first, I was confused about which parts go where, Hyde is not like Django which enforces a strict, clear line between logic in &lt;code&gt;views.py&lt;/code&gt;, data in &lt;code&gt;models.py&lt;/code&gt;, and templates for the visual&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;The folder &lt;code&gt;layout&lt;/code&gt; contains the Jinja2 templates used in rendering the site. First, you will want to create a &lt;code&gt;base.j2&lt;/code&gt; template to serve as your site-wide, base template. I provided a sample &lt;code&gt;base.j2&lt;/code&gt; to illustrate a few&amp;nbsp;points.&lt;/p&gt;
&lt;h3&gt;A base&amp;nbsp;template&lt;/h3&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    &amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resource.meta.title&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;endblock&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resource.meta.description&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    &amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resource.meta.author&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;media_url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;css/site.css&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;media_url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;css/pygments.css&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;a href=&amp;quot;/&amp;quot; class=&amp;quot;mgdotcom&amp;quot;&amp;gt;michaelgrosner.com&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;endblock&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    &amp;lt;script src=&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Django/Jinja&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;First question is: What is &lt;code&gt;resource&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt; for? Well, if you look in &lt;code&gt;site.yaml&lt;/code&gt; created when you ran &lt;code&gt;hyde create&lt;/code&gt;, you would notice fields such as &lt;code&gt;author&lt;/code&gt;, which get placed into the &lt;code&gt;meta&lt;/code&gt; variable. I&amp;#8217;m still unclear about the workings of the &lt;code&gt;resource&lt;/code&gt; variable, since &lt;code&gt;resource.meta.description&lt;/code&gt; takes in a per-page description blurb (which will be demonstrated&amp;nbsp;later).&lt;/p&gt;
&lt;p&gt;From the &lt;code&gt;base.j2&lt;/code&gt; layout, subclassing of templates can occur like as in Django by defining &lt;code&gt;block&lt;/code&gt; tags and by using the &lt;code&gt;extends&lt;/code&gt;. If you don&amp;#8217;t know about this, consider &lt;a href=&#34;https://docs.djangoproject.com/en/1.3/ref/templates/builtins/&#34;&gt;Django&amp;#8217;s excellent&amp;nbsp;documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also notice the &lt;code&gt;media_url&lt;/code&gt; function, which can be changed in &lt;code&gt;site.yaml&lt;/code&gt;. Check out the &lt;a href=&#34;https://github.com/hyde/hyde/blob/master/hyde/layouts/basic/site.yaml&#34;&gt;Hyde github source&lt;/a&gt; for a sample &lt;code&gt;site.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hyde comes with pygments support if you have it installed, thus the inclusion of &lt;code&gt;pygments.css&lt;/code&gt; and can produce nice &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; for use by running the shell&amp;nbsp;command&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;pygmentize -f html -S xxxxxx -a .highlight &amp;gt; content/media/css/pygments.css&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code&gt;xxxxxx&lt;/code&gt; is one of the &lt;a href=&#34;http://pygments.org/docs/styles/&#34;&gt;color schemes&lt;/a&gt; supported by&amp;nbsp;pygments.&lt;/p&gt;
&lt;p&gt;I chose to use Markdown in this blog as the formatter for my content files. I set up a &lt;code&gt;blog.j2&lt;/code&gt; template to extend &lt;code&gt;base.j2&lt;/code&gt; which is,&amp;nbsp;briefly:&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;markdown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;typogrify&lt;/span&gt; -&lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;mark&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;post&lt;/span&gt; -&lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;post&lt;/span&gt; -&lt;span class=&#34;cp&#34;&gt;%}{%&lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;endblock&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;endmark&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;endfilter&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;endblock&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Django/Jinja&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Now everything which inherits &lt;code&gt;blog.j2&lt;/code&gt; and has &lt;code&gt;default_block&lt;/code&gt; set to &lt;code&gt;post&lt;/code&gt; (again, more on that later) will be assumed to be in&amp;nbsp;Markdown.&lt;/p&gt;
&lt;h3&gt;Including&amp;nbsp;content&lt;/h3&gt;
&lt;p&gt;My content folder contains an &lt;code&gt;index.html&lt;/code&gt;, and folders for the &lt;code&gt;blog&lt;/code&gt; and &lt;code&gt;media&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Lets make a sample blog post as follows:
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;Setting up a static site using Hyde&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;Hyde, a static website generator using Python and Jinja2&lt;/span&gt; &lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;templating engine has some great ideas underneath, but the lack of&lt;/span&gt; &lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;documentation on the package left me digging around for hours.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;created&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;!!timestamp&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;2011-08-05 14:13:00&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;blog.j2&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;default_block&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;post&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;listable&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;true&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;&amp;lt;b&amp;gt;Hello world!&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;{% syntax python %}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;def foo(bar)&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;l-Scalar-Plain&#34;&gt;print &amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p-Indicator&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;endsyntax %&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;&lt;span class=&#34;caps&#34;&gt;YAML&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;First, notice the yaml-style variables &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, etc. These variables get imported into your layout files so, as in the sample &lt;code&gt;base.j2&lt;/code&gt; provided above, one can simply use &lt;code&gt;Setting up a static site using Hyde&lt;/code&gt; as a variable 
which will reference the yaml in the content&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Next, notice the &lt;code&gt;extends&lt;/code&gt; and &lt;code&gt;default_block&lt;/code&gt; parameters. Assuming you&amp;#8217;re extending a template (you should), these values are crucial to making sure the content knows where to&amp;nbsp;render.&lt;/p&gt;
&lt;p&gt;Lastly, I&amp;#8217;m not sure if it&amp;#8217;s standard Hyde to include a &lt;code&gt;listable&lt;/code&gt; variable (I believe it&amp;#8217;s included in the sample site code), but it&amp;#8217;s useful later in the &lt;code&gt;walk&lt;/code&gt; function which can denote pages of interest, such as blog posts, for instance, or hide hidden&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;Like in the layout files, Jinja tags and &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt; are available for use by a content file. For some reason, this really tripped me up when learning&amp;nbsp;Hyde.&lt;/p&gt;
&lt;h3&gt;Walking and&amp;nbsp;Linking&lt;/h3&gt;
&lt;p&gt;One of the template tags broken seemingly dozens of times thoroughout the documentation is getting a list of content&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;Consider the Jinja code in a layout &lt;code&gt;listing.j2&lt;/code&gt;:
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resource.node.walk_resources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;res.meta.listable&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;        &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;res.full_url&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;res.meta.title&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/a&amp;gt; &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;res.meta.created&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;    No other pages&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;endfor&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Django/Jinja&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Each resource has a &lt;code&gt;full_url&lt;/code&gt; parameter, which also references &lt;code&gt;site.yaml&lt;/code&gt; to produce absolute URLs, and has access to the &lt;code&gt;meta&lt;/code&gt; variables discussed&amp;nbsp;previously.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I really like Hyde so far, I love the ability to create a decent static site using the Django/Jinja templating engine. What I can&amp;#8217;t take is the lack of decent documentation. As with any other open source project, some in-depth source reading will go a long&amp;nbsp;way.`&lt;/p&gt;
&lt;/article&gt;            </content>
        </entry>
            <entry>
            <title type="html">Hello World!</title>
            <author><name>Michael Grosner</name></author>
            <link href="http://www.michaelgrosner.com/blog/2011/8/1-hello-world.html"/>
            <updated>2011-08-05T08:02:00Z</updated>
            <published>2011-08-05T08:02:00Z</published>
            <id>{ content_url(res.url) }}</id>
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Hyde"
                        label="Hyde" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Python"
                        label="Python" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Hello, World!"
                        label="Hello, World!" />
            
            <content type="html">
                &lt;p&gt;&lt;article&gt; &lt;br /&gt;
    Hello&amp;nbsp;World!&lt;/p&gt;
&lt;/article&gt;            </content>
        </entry>
            <entry>
            <title type="html">Second day.</title>
            <author><name>Michael Grosner</name></author>
            <link href="http://www.michaelgrosner.com/blog/2011/8/2-more.html"/>
            <updated>2009-01-02T00:00:00Z</updated>
            <published>2009-01-02T00:00:00Z</published>
            <id>{ content_url(res.url) }}</id>
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Hyde"
                        label="Hyde" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Python"
                        label="Python" />
                        <category   scheme="http://www.michaelgrosner.com/blog/tags"
                        term="Hello, World!"
                        label="Hello, World!" />
            
            <content type="html">
                &lt;p&gt;&lt;article&gt; &lt;br /&gt;
    How is&amp;nbsp;this?&lt;/p&gt;
&lt;/article&gt;            </content>
        </entry>
    </feed>
